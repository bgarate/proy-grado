// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dronestate.proto

#include "dronestate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class DroneState_PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DroneState_Point>
      _instance;
} _DroneState_Point_default_instance_;
class DroneStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DroneState>
      _instance;
} _DroneState_default_instance_;
namespace protobuf_dronestate_2eproto {
void InitDefaultsDroneState_PointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_DroneState_Point_default_instance_;
    new (ptr) ::DroneState_Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DroneState_Point::InitAsDefaultInstance();
}

void InitDefaultsDroneState_Point() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDroneState_PointImpl);
}

void InitDefaultsDroneStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dronestate_2eproto::InitDefaultsDroneState_Point();
  {
    void* ptr = &::_DroneState_default_instance_;
    new (ptr) ::DroneState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DroneState::InitAsDefaultInstance();
}

void InitDefaultsDroneState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDroneStateImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState_Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState_Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState_Point, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, drone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, seq_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, curren_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DroneState, rotation_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DroneState_Point)},
  { 8, -1, sizeof(::DroneState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DroneState_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DroneState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dronestate.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020dronestate.proto\"\316\002\n\nDroneState\022\n\n\002ip\030"
      "\001 \001(\007\022\014\n\004port\030\002 \001(\r\022\020\n\010drone_id\030\003 \001(\r\022\017\n"
      "\007seq_num\030\004 \001(\003\022\014\n\004name\030\005 \001(\t\022,\n\013curren_t"
      "ask\030\006 \001(\0162\027.DroneState.CurrentTask\022#\n\010po"
      "sition\030\007 \001(\0132\021.DroneState.Point\022#\n\010rotat"
      "ion\030\010 \001(\0132\021.DroneState.Point\032(\n\005Point\022\t\n"
      "\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"S\n\013Curren"
      "tTask\022\r\n\tINNACTIVE\020\000\022\r\n\tPATROLING\020\001\022\r\n\tF"
      "OLLOWING\020\002\022\t\n\005ALERT\020\003\022\014\n\010CHARGING\020\004b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dronestate.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dronestate_2eproto
const ::google::protobuf::EnumDescriptor* DroneState_CurrentTask_descriptor() {
  protobuf_dronestate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dronestate_2eproto::file_level_enum_descriptors[0];
}
bool DroneState_CurrentTask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DroneState_CurrentTask DroneState::INNACTIVE;
const DroneState_CurrentTask DroneState::PATROLING;
const DroneState_CurrentTask DroneState::FOLLOWING;
const DroneState_CurrentTask DroneState::ALERT;
const DroneState_CurrentTask DroneState::CHARGING;
const DroneState_CurrentTask DroneState::CurrentTask_MIN;
const DroneState_CurrentTask DroneState::CurrentTask_MAX;
const int DroneState::CurrentTask_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DroneState_Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneState_Point::kXFieldNumber;
const int DroneState_Point::kYFieldNumber;
const int DroneState_Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneState_Point::DroneState_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dronestate_2eproto::InitDefaultsDroneState_Point();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DroneState.Point)
}
DroneState_Point::DroneState_Point(const DroneState_Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:DroneState.Point)
}

void DroneState_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

DroneState_Point::~DroneState_Point() {
  // @@protoc_insertion_point(destructor:DroneState.Point)
  SharedDtor();
}

void DroneState_Point::SharedDtor() {
}

void DroneState_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneState_Point::descriptor() {
  ::protobuf_dronestate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dronestate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DroneState_Point& DroneState_Point::default_instance() {
  ::protobuf_dronestate_2eproto::InitDefaultsDroneState_Point();
  return *internal_default_instance();
}


void DroneState_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:DroneState.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool DroneState_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DroneState.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DroneState.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DroneState.Point)
  return false;
#undef DO_
}

void DroneState_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DroneState.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DroneState.Point)
}

::google::protobuf::uint8* DroneState_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DroneState.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DroneState.Point)
  return target;
}

size_t DroneState_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DroneState.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneState_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DroneState.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneState_Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneState_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DroneState.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DroneState.Point)
    MergeFrom(*source);
  }
}

void DroneState_Point::MergeFrom(const DroneState_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DroneState.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void DroneState_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DroneState.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneState_Point::CopyFrom(const DroneState_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DroneState.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneState_Point::IsInitialized() const {
  return true;
}

void DroneState_Point::Swap(DroneState_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneState_Point::InternalSwap(DroneState_Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneState_Point::GetMetadata() const {
  protobuf_dronestate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dronestate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DroneState::InitAsDefaultInstance() {
  ::_DroneState_default_instance_._instance.get_mutable()->position_ = const_cast< ::DroneState_Point*>(
      ::DroneState_Point::internal_default_instance());
  ::_DroneState_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::DroneState_Point*>(
      ::DroneState_Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneState::kIpFieldNumber;
const int DroneState::kPortFieldNumber;
const int DroneState::kDroneIdFieldNumber;
const int DroneState::kSeqNumFieldNumber;
const int DroneState::kNameFieldNumber;
const int DroneState::kCurrenTaskFieldNumber;
const int DroneState::kPositionFieldNumber;
const int DroneState::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneState::DroneState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dronestate_2eproto::InitDefaultsDroneState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DroneState)
}
DroneState::DroneState(const DroneState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    position_ = new ::DroneState_Point(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::DroneState_Point(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&curren_task_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(curren_task_));
  // @@protoc_insertion_point(copy_constructor:DroneState)
}

void DroneState::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curren_task_) -
      reinterpret_cast<char*>(&position_)) + sizeof(curren_task_));
  _cached_size_ = 0;
}

DroneState::~DroneState() {
  // @@protoc_insertion_point(destructor:DroneState)
  SharedDtor();
}

void DroneState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void DroneState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneState::descriptor() {
  ::protobuf_dronestate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dronestate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DroneState& DroneState::default_instance() {
  ::protobuf_dronestate_2eproto::InitDefaultsDroneState();
  return *internal_default_instance();
}


void DroneState::Clear() {
// @@protoc_insertion_point(message_clear_start:DroneState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curren_task_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(curren_task_));
  _internal_metadata_.Clear();
}

bool DroneState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DroneState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drone_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 seq_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DroneState.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DroneState.CurrentTask curren_task = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curren_task(static_cast< ::DroneState_CurrentTask >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DroneState.Point position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DroneState.Point rotation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DroneState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DroneState)
  return false;
#undef DO_
}

void DroneState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DroneState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // uint32 drone_id = 3;
  if (this->drone_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->drone_id(), output);
  }

  // int64 seq_num = 4;
  if (this->seq_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->seq_num(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DroneState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // .DroneState.CurrentTask curren_task = 6;
  if (this->curren_task() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->curren_task(), output);
  }

  // .DroneState.Point position = 7;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *position_, output);
  }

  // .DroneState.Point rotation = 8;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *rotation_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DroneState)
}

::google::protobuf::uint8* DroneState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DroneState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // uint32 drone_id = 3;
  if (this->drone_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->drone_id(), target);
  }

  // int64 seq_num = 4;
  if (this->seq_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->seq_num(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DroneState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // .DroneState.CurrentTask curren_task = 6;
  if (this->curren_task() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->curren_task(), target);
  }

  // .DroneState.Point position = 7;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *position_, deterministic, target);
  }

  // .DroneState.Point rotation = 8;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *rotation_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DroneState)
  return target;
}

size_t DroneState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DroneState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .DroneState.Point position = 7;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .DroneState.Point rotation = 8;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 + 4;
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // int64 seq_num = 4;
  if (this->seq_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seq_num());
  }

  // uint32 drone_id = 3;
  if (this->drone_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drone_id());
  }

  // .DroneState.CurrentTask curren_task = 6;
  if (this->curren_task() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curren_task());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DroneState)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DroneState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DroneState)
    MergeFrom(*source);
  }
}

void DroneState::MergeFrom(const DroneState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DroneState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    mutable_position()->::DroneState_Point::MergeFrom(from.position());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::DroneState_Point::MergeFrom(from.rotation());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.seq_num() != 0) {
    set_seq_num(from.seq_num());
  }
  if (from.drone_id() != 0) {
    set_drone_id(from.drone_id());
  }
  if (from.curren_task() != 0) {
    set_curren_task(from.curren_task());
  }
}

void DroneState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DroneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneState::CopyFrom(const DroneState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DroneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneState::IsInitialized() const {
  return true;
}

void DroneState::Swap(DroneState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneState::InternalSwap(DroneState* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(ip_, other->ip_);
  swap(port_, other->port_);
  swap(seq_num_, other->seq_num_);
  swap(drone_id_, other->drone_id_);
  swap(curren_task_, other->curren_task_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneState::GetMetadata() const {
  protobuf_dronestate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dronestate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DroneState_Point* Arena::Create< ::DroneState_Point >(Arena* arena) {
  return Arena::CreateInternal< ::DroneState_Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DroneState* Arena::Create< ::DroneState >(Arena* arena) {
  return Arena::CreateInternal< ::DroneState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
