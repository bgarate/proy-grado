// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dronestate.proto

#ifndef PROTOBUF_dronestate_2eproto__INCLUDED
#define PROTOBUF_dronestate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class DroneState;
class DroneStateDefaultTypeInternal;
extern DroneStateDefaultTypeInternal _DroneState_default_instance_;
class DroneState_Point;
class DroneState_PointDefaultTypeInternal;
extern DroneState_PointDefaultTypeInternal _DroneState_Point_default_instance_;

namespace protobuf_dronestate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dronestate_2eproto

enum DroneState_CurrentTask {
  DroneState_CurrentTask_INNACTIVE = 0,
  DroneState_CurrentTask_PATROLING = 1,
  DroneState_CurrentTask_FOLLOWING = 2,
  DroneState_CurrentTask_ALERT = 3,
  DroneState_CurrentTask_CHARGING = 4,
  DroneState_CurrentTask_DroneState_CurrentTask_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DroneState_CurrentTask_DroneState_CurrentTask_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DroneState_CurrentTask_IsValid(int value);
const DroneState_CurrentTask DroneState_CurrentTask_CurrentTask_MIN = DroneState_CurrentTask_INNACTIVE;
const DroneState_CurrentTask DroneState_CurrentTask_CurrentTask_MAX = DroneState_CurrentTask_CHARGING;
const int DroneState_CurrentTask_CurrentTask_ARRAYSIZE = DroneState_CurrentTask_CurrentTask_MAX + 1;

const ::google::protobuf::EnumDescriptor* DroneState_CurrentTask_descriptor();
inline const ::std::string& DroneState_CurrentTask_Name(DroneState_CurrentTask value) {
  return ::google::protobuf::internal::NameOfEnum(
    DroneState_CurrentTask_descriptor(), value);
}
inline bool DroneState_CurrentTask_Parse(
    const ::std::string& name, DroneState_CurrentTask* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DroneState_CurrentTask>(
    DroneState_CurrentTask_descriptor(), name, value);
}
// ===================================================================

class DroneState_Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneState.Point) */ {
 public:
  DroneState_Point();
  virtual ~DroneState_Point();

  DroneState_Point(const DroneState_Point& from);

  inline DroneState_Point& operator=(const DroneState_Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneState_Point& default_instance();

  static inline const DroneState_Point* internal_default_instance() {
    return reinterpret_cast<const DroneState_Point*>(
               &_DroneState_Point_default_instance_);
  }

  void Swap(DroneState_Point* other);

  // implements Message ----------------------------------------------

  inline DroneState_Point* New() const PROTOBUF_FINAL { return New(NULL); }

  DroneState_Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DroneState_Point& from);
  void MergeFrom(const DroneState_Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DroneState_Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:DroneState.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct  protobuf_dronestate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DroneState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DroneState) */ {
 public:
  DroneState();
  virtual ~DroneState();

  DroneState(const DroneState& from);

  inline DroneState& operator=(const DroneState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneState& default_instance();

  static inline const DroneState* internal_default_instance() {
    return reinterpret_cast<const DroneState*>(
               &_DroneState_default_instance_);
  }

  void Swap(DroneState* other);

  // implements Message ----------------------------------------------

  inline DroneState* New() const PROTOBUF_FINAL { return New(NULL); }

  DroneState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DroneState& from);
  void MergeFrom(const DroneState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DroneState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DroneState_Point Point;

  typedef DroneState_CurrentTask CurrentTask;
  static const CurrentTask INNACTIVE =
    DroneState_CurrentTask_INNACTIVE;
  static const CurrentTask PATROLING =
    DroneState_CurrentTask_PATROLING;
  static const CurrentTask FOLLOWING =
    DroneState_CurrentTask_FOLLOWING;
  static const CurrentTask ALERT =
    DroneState_CurrentTask_ALERT;
  static const CurrentTask CHARGING =
    DroneState_CurrentTask_CHARGING;
  static inline bool CurrentTask_IsValid(int value) {
    return DroneState_CurrentTask_IsValid(value);
  }
  static const CurrentTask CurrentTask_MIN =
    DroneState_CurrentTask_CurrentTask_MIN;
  static const CurrentTask CurrentTask_MAX =
    DroneState_CurrentTask_CurrentTask_MAX;
  static const int CurrentTask_ARRAYSIZE =
    DroneState_CurrentTask_CurrentTask_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CurrentTask_descriptor() {
    return DroneState_CurrentTask_descriptor();
  }
  static inline const ::std::string& CurrentTask_Name(CurrentTask value) {
    return DroneState_CurrentTask_Name(value);
  }
  static inline bool CurrentTask_Parse(const ::std::string& name,
      CurrentTask* value) {
    return DroneState_CurrentTask_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .DroneState.Point position = 7;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 7;
  const ::DroneState_Point& position() const;
  ::DroneState_Point* mutable_position();
  ::DroneState_Point* release_position();
  void set_allocated_position(::DroneState_Point* position);

  // .DroneState.Point rotation = 8;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 8;
  const ::DroneState_Point& rotation() const;
  ::DroneState_Point* mutable_rotation();
  ::DroneState_Point* release_rotation();
  void set_allocated_rotation(::DroneState_Point* rotation);

  // fixed32 ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // int64 seq_num = 4;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 4;
  ::google::protobuf::int64 seq_num() const;
  void set_seq_num(::google::protobuf::int64 value);

  // uint32 drone_id = 3;
  void clear_drone_id();
  static const int kDroneIdFieldNumber = 3;
  ::google::protobuf::uint32 drone_id() const;
  void set_drone_id(::google::protobuf::uint32 value);

  // .DroneState.CurrentTask curren_task = 6;
  void clear_curren_task();
  static const int kCurrenTaskFieldNumber = 6;
  ::DroneState_CurrentTask curren_task() const;
  void set_curren_task(::DroneState_CurrentTask value);

  // @@protoc_insertion_point(class_scope:DroneState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::DroneState_Point* position_;
  ::DroneState_Point* rotation_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::int64 seq_num_;
  ::google::protobuf::uint32 drone_id_;
  int curren_task_;
  mutable int _cached_size_;
  friend struct  protobuf_dronestate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DroneState_Point

// double x = 1;
inline void DroneState_Point::clear_x() {
  x_ = 0;
}
inline double DroneState_Point::x() const {
  // @@protoc_insertion_point(field_get:DroneState.Point.x)
  return x_;
}
inline void DroneState_Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:DroneState.Point.x)
}

// double y = 2;
inline void DroneState_Point::clear_y() {
  y_ = 0;
}
inline double DroneState_Point::y() const {
  // @@protoc_insertion_point(field_get:DroneState.Point.y)
  return y_;
}
inline void DroneState_Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:DroneState.Point.y)
}

// double z = 3;
inline void DroneState_Point::clear_z() {
  z_ = 0;
}
inline double DroneState_Point::z() const {
  // @@protoc_insertion_point(field_get:DroneState.Point.z)
  return z_;
}
inline void DroneState_Point::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:DroneState.Point.z)
}

// -------------------------------------------------------------------

// DroneState

// fixed32 ip = 1;
inline void DroneState::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 DroneState::ip() const {
  // @@protoc_insertion_point(field_get:DroneState.ip)
  return ip_;
}
inline void DroneState::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:DroneState.ip)
}

// uint32 port = 2;
inline void DroneState::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 DroneState::port() const {
  // @@protoc_insertion_point(field_get:DroneState.port)
  return port_;
}
inline void DroneState::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:DroneState.port)
}

// uint32 drone_id = 3;
inline void DroneState::clear_drone_id() {
  drone_id_ = 0u;
}
inline ::google::protobuf::uint32 DroneState::drone_id() const {
  // @@protoc_insertion_point(field_get:DroneState.drone_id)
  return drone_id_;
}
inline void DroneState::set_drone_id(::google::protobuf::uint32 value) {
  
  drone_id_ = value;
  // @@protoc_insertion_point(field_set:DroneState.drone_id)
}

// int64 seq_num = 4;
inline void DroneState::clear_seq_num() {
  seq_num_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DroneState::seq_num() const {
  // @@protoc_insertion_point(field_get:DroneState.seq_num)
  return seq_num_;
}
inline void DroneState::set_seq_num(::google::protobuf::int64 value) {
  
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:DroneState.seq_num)
}

// string name = 5;
inline void DroneState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DroneState::name() const {
  // @@protoc_insertion_point(field_get:DroneState.name)
  return name_.GetNoArena();
}
inline void DroneState::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DroneState.name)
}
#if LANG_CXX11
inline void DroneState::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DroneState.name)
}
#endif
inline void DroneState::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DroneState.name)
}
inline void DroneState::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DroneState.name)
}
inline ::std::string* DroneState::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:DroneState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DroneState::release_name() {
  // @@protoc_insertion_point(field_release:DroneState.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DroneState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DroneState.name)
}

// .DroneState.CurrentTask curren_task = 6;
inline void DroneState::clear_curren_task() {
  curren_task_ = 0;
}
inline ::DroneState_CurrentTask DroneState::curren_task() const {
  // @@protoc_insertion_point(field_get:DroneState.curren_task)
  return static_cast< ::DroneState_CurrentTask >(curren_task_);
}
inline void DroneState::set_curren_task(::DroneState_CurrentTask value) {
  
  curren_task_ = value;
  // @@protoc_insertion_point(field_set:DroneState.curren_task)
}

// .DroneState.Point position = 7;
inline bool DroneState::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void DroneState::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::DroneState_Point& DroneState::position() const {
  // @@protoc_insertion_point(field_get:DroneState.position)
  return position_ != NULL ? *position_
                         : *::DroneState_Point::internal_default_instance();
}
inline ::DroneState_Point* DroneState::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::DroneState_Point;
  }
  // @@protoc_insertion_point(field_mutable:DroneState.position)
  return position_;
}
inline ::DroneState_Point* DroneState::release_position() {
  // @@protoc_insertion_point(field_release:DroneState.position)
  
  ::DroneState_Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void DroneState::set_allocated_position(::DroneState_Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DroneState.position)
}

// .DroneState.Point rotation = 8;
inline bool DroneState::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void DroneState::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
inline const ::DroneState_Point& DroneState::rotation() const {
  // @@protoc_insertion_point(field_get:DroneState.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::DroneState_Point::internal_default_instance();
}
inline ::DroneState_Point* DroneState::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::DroneState_Point;
  }
  // @@protoc_insertion_point(field_mutable:DroneState.rotation)
  return rotation_;
}
inline ::DroneState_Point* DroneState::release_rotation() {
  // @@protoc_insertion_point(field_release:DroneState.rotation)
  
  ::DroneState_Point* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void DroneState::set_allocated_rotation(::DroneState_Point* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:DroneState.rotation)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DroneState_CurrentTask> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DroneState_CurrentTask>() {
  return ::DroneState_CurrentTask_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dronestate_2eproto__INCLUDED
